#removing data point 1 b/c it has no associated location
full_data2n3 <- full_data %>% filter((time == 3) | (time == 2))
#for looping thru data  known to have some data at 2 and 3
t3data <- full_data %>% filter(time == 3)
for (i in 1:dim(t3data)[1]) {
temp <- full_data2n3 %>% filter(prolific_ID == t3data$prolific_ID[i])
if (t3data$movedyes[i] == 0) {
if (is.na(temp[1,7]) & !is.na(temp[2,7])) {
temp[1,3:20] <- temp[2,3:20] #overwritting location info, adding park and pop info
}
}
full_data_ovrNA_temp <- rbind(full_data_ovrNA_temp, temp)
}
check22 <- filter(full_data_ovrNA_temp, time==2)
check32 <- filter(full_data_ovrNA_temp, time==3)
View(full_data_ovrNA_temp)
fulld_ata_t2only <- filter(full_data,prolific_id != t3data$prolific_ID)
fulld_ata_t2only <- filter(full_data,prolific_ID != t3data$prolific_ID)
fulld_ata_t2only <- filter(full_data,!(prolific_ID == t3data$prolific_ID))
list <- c(t3data$prolific_ID)
fulld_ata_t2only <- filter(full_data,prolific_ID != list)
fulld_ata_t2only <- filter(full_data, !(prolific_ID %in% list))
alldata <- rbind(full_data_ovrNA_temp,fulld_ata_t2only)
View(alldata)
check2 <- filter(full_data, time==2)
check3 <- filter(full_data, time==3)
check22 <- filter(alldata, time==2)
check32 <- filter(alldata, time==3)
View(check2)
View(check22)
View(check2)
View(check22)
View(full_data)
check21 <- filter(init_data, time==2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, warning = F, message = F)
# Chunk 2: libraries
library(tidyverse)
library(tigris)
library(stringr)
Sys.setenv(CENSUS_KEY="dbcdeeed2f9e907f31811ee78c1f239a2aa77934")
# Chunk 3: LoadData
# loading data from saved "data" folder (in github folder)
lat_longs_full <- read_csv("data/NaturalElementsSpatialAnalysis - EditedLatLong2Surveys.csv")
park_tracts <- read_csv("data/nanda_parks_tract_2018_01P.csv")
pop_data <- read_csv("data/DECENNIALPL2020.P1_data_with_overlays_2021-11-04T122132.csv")
init_data <- read_csv("data/NaturalElementsDataFinal - DatasetALLtimes.csv")
fips_convert <- read_csv("data/FIPS_Convert.csv") #from https://www.nrcs.usda.gov/wps/portal/nrcs/detail/national/home/?cid=nrcs143_013697
# Chunk 4: IdentifyTracts
# # retrieves tract from lat long, takes >10 mins to run, so I just saved it and dont run
# colnames(lat_longs_full) <- c("StartDate", "EndDate", "ResponseID", "prolific_ID",
#                               "lat", "lon", "time", "state", "county", "tract")
# lat_longs <- filter(lat_longs_full, !is.na(lat)) %>% #removing entries without latlong
#   mutate(GEOID = NA)
#
# for (i in 1:dim(lat_longs)[1]) {
#
#   lat_longs[i,11] <- call_geolocator_latlon(lat = lat_longs$lat[i], lon = lat_longs$lon[i])
#   print(i)
#
# }
#
# write_csv(lat_longs, "data/LatLon_to_Tract.csv")
# geoid_full <- lat_longs
# geoid <- filter(geoid_full, !is.na(GEOID))
geoid_full <- read_csv("data/LatLon_to_Tract.csv")
geoid <- filter(geoid_full, !is.na(GEOID) || !is.na(prolific_ID)) #removing entries that had lat longs not in US census block
# Chunk 5: convertGEOID
lat_longs_tract <- geoid[,1:7] %>%
transmute(
prolific_ID = prolific_ID,
time = time,
tract = NA,
CountyCode = NA
)
for (i in 1:dim(lat_longs_tract)[1]){
lat_longs_tract$tract[i] <- str_sub(geoid$GEOID[i],1,11)
lat_longs_tract$CountyCode[i] <- as.numeric(str_sub(geoid$GEOID[i],1,5))
}
lat_longs_tract <- lat_longs_tract %>%
left_join(fips_convert, by = "CountyCode")
# Chunk 6: NationalTractData
# Population
pop_data_2020 <- pop_data[-1,] %>%
select(GEO_ID, P1_001N) %>%
separate(
GEO_ID,
into = c(NA, "tract"),
sep = "US"
)%>%
transmute(tract, popultion = as.numeric(P1_001N))
# Park
park_tracts <- park_tracts %>%
transmute(tract = tract_fips10, numParks = count_open_parks, tractArea = tract_area,
parkArea = tot_park_area, propPark = prop_park_area_tract)
ntl_tract_data <- left_join(park_tracts,pop_data_2020) %>%
mutate(
popDensity = popultion / tractArea,
parkAreaPerPerson = parkArea / popultion # parkAPP
)
# Chunk 7: NationQuartile
tractarea_NQs <- quantile(ntl_tract_data$tractArea, na.rm = T)
parks_NQs <- quantile(ntl_tract_data$numParks, na.rm = T)
parkarea_NQs <- quantile(ntl_tract_data$parkArea, na.rm = T)
prop_parkarea_NQs <- quantile(ntl_tract_data$propPark, na.rm = T)
pop_NQs <- quantile(ntl_tract_data$popultion, na.rm = T)
popdensity_NQs <- quantile(ntl_tract_data$popDensity, na.rm = T)
parkAPP_NQs <- quantile(ntl_tract_data$parkAreaPerPerson, na.rm = T)
ntl_tract_data <- ntl_tract_data %>%
mutate(
tractArea_NQ = case_when(
tractArea > tractarea_NQs[4] ~ 4,
tractArea > tractarea_NQs[3] ~ 3,
tractArea > tractarea_NQs[2] ~ 2,
tractArea >= tractarea_NQs[1] ~ 1
),
numParks_NQ = case_when(
numParks > parks_NQs[4] ~ 4,
numParks > parks_NQs[3] ~ 3,
numParks > parks_NQs[2] ~ 2,
numParks >= parks_NQs[1] ~ 1
),
parkArea_NQ = case_when(
parkArea > parkarea_NQs[4] ~ 4,
parkArea > parkarea_NQs[3] ~ 3,
parkArea > parkarea_NQs[2] ~ 2,
parkArea >= parkarea_NQs[1] ~ 1
),
propPark_NQ = case_when(
propPark > prop_parkarea_NQs[4] ~ 4,
propPark > prop_parkarea_NQs[3] ~ 3,
propPark > prop_parkarea_NQs[2] ~ 2,
propPark >= prop_parkarea_NQs[1] ~ 1
),
popultion_NQ = case_when(
popultion > pop_NQs[4] ~ 4,
popultion > pop_NQs[3] ~ 3,
popultion > pop_NQs[2] ~ 2,
popultion >= pop_NQs[1] ~ 1
),
popDensity_NQ = case_when(
popDensity > popdensity_NQs[4] ~ 4,
popDensity > popdensity_NQs[3] ~ 3,
popDensity > popdensity_NQs[2] ~ 2,
popDensity >= popdensity_NQs[1] ~ 1
),
parkAreaPerPerson_NQ = case_when(
parkAreaPerPerson > parkAPP_NQs[4] ~ 4,
parkAreaPerPerson > parkAPP_NQs[3] ~ 3,
parkAreaPerPerson > parkAPP_NQs[2] ~ 2,
parkAreaPerPerson >= parkAPP_NQs[1] ~ 1
)
) %>%
# reordering
select(tract, tractArea, tractArea_NQ, numParks, numParks_NQ, parkArea,
parkArea_NQ, propPark, propPark_NQ, popultion, popultion_NQ,
popDensity, popDensity_NQ, parkAreaPerPerson, parkAreaPerPerson_NQ)
# Chunk 8: combineData
combinedVars <- init_data %>%
select(prolific_ID, time, movedyes) %>%
left_join(lat_longs_tract, by = c("prolific_ID" = "prolific_ID", "time" = "time")) %>%
left_join(ntl_tract_data, by = "tract")
completeData <- init_data %>%
left_join(combinedVars %>% select(!movedyes), by = c("prolific_ID" = "prolific_ID", "time" = "time"))
write_csv(completeData, "data/NaturalElementsSpatialAnalysis - TractData.csv")
# Chunk 9: Overwrite NAs
combinedVars_ovrNA_temp <- NULL # where data with overwritten na's will be stored
#removing data point 1 b/c it has no associated location
combinedVars2n3 <- combinedVars %>% filter((time == 3) | (time == 2))
#for looping thru data  known to have some data at 2 and 3
t3data <- combinedVars %>% filter(time == 3)
for (i in 1:dim(t3data)[1]) {
temp <- combinedVars2n3 %>% filter(prolific_ID == t3data$prolific_ID[i])
if (t3data$movedyes[i] == 0) {
if (is.na(temp[1,8]) & !is.na(temp[2,8])) {
temp[1,4:21] <- temp[2,4:21] #overwritting location info, adding park and pop info
}
else if (!is.na(temp[1,8]) & is.na(temp[2,8])) {
temp[2,4:21] <- temp[1,4:21] #overwritting location info, adding park and pop info
}
}
combinedVars_ovrNA_temp <- rbind(combinedVars_ovrNA_temp, temp)
}
#used for checking, should be the same as combinedVars but with appropriate NAs over-wrote
combinedVars_ovrNA <- init_data %>%
select(prolific_ID, time) %>%
left_join(combinedVars_ovrNA_temp, by = c("prolific_ID" = "prolific_ID", "time" = "time"))
completeData_ovrNA <- init_data %>%
left_join(combinedVars_ovrNA %>% select(!movedyes), by = c("prolific_ID" = "prolific_ID", "time" = "time"))
write_csv(completeData_ovrNA, "data/NaturalElementsSpatialAnalysis - TractData_OverwroteNAs.csv")
# Chunk 10: full data variables
check1 <- filter(geoid_full, time==2)
check1na <- check1 %>% mutate(cnt = as.numeric(is.na(GEOID)))
lat_longs_tract_ <- geoid_full[,1:7] %>%
transmute(
prolific_ID = prolific_ID,
time = time,
tract = NA,
CountyCode = NA
)
for (i in 1:dim(lat_longs_tract_2)[1]){
lat_longs_tract_2$tract[i] <- str_sub(geoid_full$GEOID[i],1,11)
lat_longs_tract_2$CountyCode[i] <- as.numeric(str_sub(geoid_full$GEOID[i],1,5))
}
lat_longs_tract_2 <- lat_longs_tract_2 %>%
left_join(fips_convert, by = "CountyCode")
test <- left_join(lat_longs_tract_2,ntl_tract_data)
test_f <- filter(test, time==2)
test_ch <- filter(test_f, !is.na(tractArea))
geoid <- filter(geoid_full, !is.na(GEOID) && !is.na(prolific_ID))
geoid <- filter(geoid_full, !is.na(GEOID) )
geoid <- filter(geoid_full, !is.na(prolific_ID) )
geoid <- filter(geoid_full, !is.na(GEOID) && !is.na(prolific_ID))
geoid <- geoid_full %>% filter(!is.na(GEOID)) %>% filter(!is.na(prolific_ID))
full_data <- left_join(lat_longs_tract,ntl_tract_data) %>%
left_join(init_data %>% select (prolific_ID,time,movedyes))
full_data_ovrNA_temp <- NULL # where data with overwritten na's will be stored
#removing data point 1 b/c it has no associated location
full_data2n3 <- full_data %>% filter((time == 3) | (time == 2))
#for looping thru data  known to have some data at 2 and 3
t3data <- full_data %>% filter(time == 3)
for (i in 1:dim(t3data)[1]) {
temp <- full_data2n3 %>% filter(prolific_ID == t3data$prolific_ID[i])
if (t3data$movedyes[i] == 0) {
if (is.na(temp[1,7]) & !is.na(temp[2,7])) {
temp[1,3:20] <- temp[2,3:20] #overwritting location info, adding park and pop info
}
}
full_data_ovrNA_temp <- rbind(full_data_ovrNA_temp, temp)
}
# adding particpants who only took part 1
list <- c(t3data$prolific_ID)
full_data_t2only <- filter(full_data, !(prolific_ID %in% list))
alldata <- rbind(full_data_ovrNA_temp,fulld_ata_t2only)
# check counting # of oservations
check21 <- filter(init_data, time==2) # data set @t=2 provided to append my info to
check2 <- filter(full_data, time==2)  # data set @t=2 from lat longs
check3 <- filter(full_data, time==3) # data set @t=3 from lat longs
check22 <- filter(alldata, time==2) # data set @t=2 from above code
check32 <- filter(alldata, time==3) # data set @t=3 from above code
# reordering
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, warning = F, message = F)
# Chunk 2: libraries
library(tidyverse)
library(tigris)
library(stringr)
Sys.setenv(CENSUS_KEY="dbcdeeed2f9e907f31811ee78c1f239a2aa77934")
# Chunk 3: LoadData
# loading data from saved "data" folder (in github folder)
lat_longs_full <- read_csv("data/NaturalElementsSpatialAnalysis - EditedLatLong2Surveys.csv")
park_tracts <- read_csv("data/nanda_parks_tract_2018_01P.csv")
pop_data <- read_csv("data/DECENNIALPL2020.P1_data_with_overlays_2021-11-04T122132.csv")
init_data <- read_csv("data/NaturalElementsDataFinal - DatasetALLtimes.csv")
fips_convert <- read_csv("data/FIPS_Convert.csv") #from https://www.nrcs.usda.gov/wps/portal/nrcs/detail/national/home/?cid=nrcs143_013697
# Chunk 4: IdentifyTracts
# # retrieves tract from lat long, takes >10 mins to run, so I just saved it and dont run
# colnames(lat_longs_full) <- c("StartDate", "EndDate", "ResponseID", "prolific_ID",
#                               "lat", "lon", "time", "state", "county", "tract")
# lat_longs <- filter(lat_longs_full, !is.na(lat)) %>% #removing entries without latlong
#   mutate(GEOID = NA)
#
# for (i in 1:dim(lat_longs)[1]) {
#
#   lat_longs[i,11] <- call_geolocator_latlon(lat = lat_longs$lat[i], lon = lat_longs$lon[i])
#   print(i)
#
# }
#
# write_csv(lat_longs, "data/LatLon_to_Tract.csv")
# geoid_full <- lat_longs
# geoid <- filter(geoid_full, !is.na(GEOID))
geoid_full <- read_csv("data/LatLon_to_Tract.csv")
geoid <- geoid_full %>% filter(!is.na(GEOID)) %>% filter(!is.na(prolific_ID)) #removing entries that had lat longs not in US census block
# Chunk 5: convertGEOID
lat_longs_tract <- geoid[,1:7] %>%
transmute(
prolific_ID = prolific_ID,
time = time,
tract = NA,
CountyCode = NA
)
for (i in 1:dim(lat_longs_tract)[1]){
lat_longs_tract$tract[i] <- str_sub(geoid$GEOID[i],1,11)
lat_longs_tract$CountyCode[i] <- as.numeric(str_sub(geoid$GEOID[i],1,5))
}
lat_longs_tract <- lat_longs_tract %>%
left_join(fips_convert, by = "CountyCode")
# Chunk 6: NationalTractData
# Population
pop_data_2020 <- pop_data[-1,] %>%
select(GEO_ID, P1_001N) %>%
separate(
GEO_ID,
into = c(NA, "tract"),
sep = "US"
)%>%
transmute(tract, popultion = as.numeric(P1_001N))
# Park
park_tracts <- park_tracts %>%
transmute(tract = tract_fips10, numParks = count_open_parks, tractArea = tract_area,
parkArea = tot_park_area, propPark = prop_park_area_tract)
ntl_tract_data <- left_join(park_tracts,pop_data_2020) %>%
mutate(
popDensity = popultion / tractArea,
parkAreaPerPerson = parkArea / popultion # parkAPP
)
# Chunk 7: NationQuartile
tractarea_NQs <- quantile(ntl_tract_data$tractArea, na.rm = T)
parks_NQs <- quantile(ntl_tract_data$numParks, na.rm = T)
parkarea_NQs <- quantile(ntl_tract_data$parkArea, na.rm = T)
prop_parkarea_NQs <- quantile(ntl_tract_data$propPark, na.rm = T)
pop_NQs <- quantile(ntl_tract_data$popultion, na.rm = T)
popdensity_NQs <- quantile(ntl_tract_data$popDensity, na.rm = T)
parkAPP_NQs <- quantile(ntl_tract_data$parkAreaPerPerson, na.rm = T)
ntl_tract_data <- ntl_tract_data %>%
mutate(
tractArea_NQ = case_when(
tractArea > tractarea_NQs[4] ~ 4,
tractArea > tractarea_NQs[3] ~ 3,
tractArea > tractarea_NQs[2] ~ 2,
tractArea >= tractarea_NQs[1] ~ 1
),
numParks_NQ = case_when(
numParks > parks_NQs[4] ~ 4,
numParks > parks_NQs[3] ~ 3,
numParks > parks_NQs[2] ~ 2,
numParks >= parks_NQs[1] ~ 1
),
parkArea_NQ = case_when(
parkArea > parkarea_NQs[4] ~ 4,
parkArea > parkarea_NQs[3] ~ 3,
parkArea > parkarea_NQs[2] ~ 2,
parkArea >= parkarea_NQs[1] ~ 1
),
propPark_NQ = case_when(
propPark > prop_parkarea_NQs[4] ~ 4,
propPark > prop_parkarea_NQs[3] ~ 3,
propPark > prop_parkarea_NQs[2] ~ 2,
propPark >= prop_parkarea_NQs[1] ~ 1
),
popultion_NQ = case_when(
popultion > pop_NQs[4] ~ 4,
popultion > pop_NQs[3] ~ 3,
popultion > pop_NQs[2] ~ 2,
popultion >= pop_NQs[1] ~ 1
),
popDensity_NQ = case_when(
popDensity > popdensity_NQs[4] ~ 4,
popDensity > popdensity_NQs[3] ~ 3,
popDensity > popdensity_NQs[2] ~ 2,
popDensity >= popdensity_NQs[1] ~ 1
),
parkAreaPerPerson_NQ = case_when(
parkAreaPerPerson > parkAPP_NQs[4] ~ 4,
parkAreaPerPerson > parkAPP_NQs[3] ~ 3,
parkAreaPerPerson > parkAPP_NQs[2] ~ 2,
parkAreaPerPerson >= parkAPP_NQs[1] ~ 1
)
) %>%
# reordering
select(tract, tractArea, tractArea_NQ, numParks, numParks_NQ, parkArea,
parkArea_NQ, propPark, propPark_NQ, popultion, popultion_NQ,
popDensity, popDensity_NQ, parkAreaPerPerson, parkAreaPerPerson_NQ)
# Chunk 8: combineData
combinedVars <- init_data %>%
select(prolific_ID, time, movedyes) %>%
left_join(lat_longs_tract, by = c("prolific_ID" = "prolific_ID", "time" = "time")) %>%
left_join(ntl_tract_data, by = "tract")
completeData <- init_data %>%
left_join(combinedVars %>% select(!movedyes), by = c("prolific_ID" = "prolific_ID", "time" = "time"))
write_csv(completeData, "data/NaturalElementsSpatialAnalysis - TractData.csv")
# Chunk 9: Overwrite NAs
combinedVars_ovrNA_temp <- NULL # where data with overwritten na's will be stored
#removing data point 1 b/c it has no associated location
combinedVars2n3 <- combinedVars %>% filter((time == 3) | (time == 2))
#for looping thru data  known to have some data at 2 and 3
t3data <- combinedVars %>% filter(time == 3)
for (i in 1:dim(t3data)[1]) {
temp <- combinedVars2n3 %>% filter(prolific_ID == t3data$prolific_ID[i])
if (t3data$movedyes[i] == 0) {
if (is.na(temp[1,8]) & !is.na(temp[2,8])) {
temp[1,4:21] <- temp[2,4:21] #overwritting location info, adding park and pop info
}
else if (!is.na(temp[1,8]) & is.na(temp[2,8])) {
temp[2,4:21] <- temp[1,4:21] #overwritting location info, adding park and pop info
}
}
combinedVars_ovrNA_temp <- rbind(combinedVars_ovrNA_temp, temp)
}
#used for checking, should be the same as combinedVars but with appropriate NAs over-wrote
combinedVars_ovrNA <- init_data %>%
select(prolific_ID, time) %>%
left_join(combinedVars_ovrNA_temp, by = c("prolific_ID" = "prolific_ID", "time" = "time"))
completeData_ovrNA <- init_data %>%
left_join(combinedVars_ovrNA %>% select(!movedyes), by = c("prolific_ID" = "prolific_ID", "time" = "time"))
write_csv(completeData_ovrNA, "data/NaturalElementsSpatialAnalysis - TractData_OverwroteNAs.csv")
View(lat_longs_full)
View(init_data)
full_data <- left_join(lat_longs_tract,ntl_tract_data) %>%
left_join(init_data %>% select (prolific_ID,time,movedyes))
full_data_ovrNA_temp <- NULL # where data with overwritten na's will be stored
#removing data point 1 b/c it has no associated location
full_data2n3 <- full_data %>% filter((time == 3) | (time == 2))
#for looping thru data  known to have some data at 2 and 3
t3data <- full_data %>% filter(time == 3)
for (i in 1:dim(t3data)[1]) {
temp <- full_data2n3 %>% filter(prolific_ID == t3data$prolific_ID[i])
if (t3data$movedyes[i] == 0) {
if (is.na(temp[1,7]) & !is.na(temp[2,7])) {
temp[1,3:20] <- temp[2,3:20] #overwritting location info, adding park and pop info
}
}
full_data_ovrNA_temp <- rbind(full_data_ovrNA_temp, temp)
}
# adding particpants who only took part 1
list <- c(t3data$prolific_ID)
full_data_t2only <- filter(full_data, !(prolific_ID %in% list))
alldata <- rbind(full_data_ovrNA_temp,fulld_ata_t2only)
# check counting # of observations
check21 <- filter(init_data, time==2) # data set @t=2 provided to append my info to
check2 <- filter(full_data, time==2)  # data set @t=2 from lat longs
check3 <- filter(full_data, time==3) # data set @t=3 from lat longs
check22 <- filter(alldata, time==2) # data set @t=2 from above code
check32 <- filter(alldata, time==3) # data set @t=3 from above code
tract_data_t2 <- filter(alldata, time==2)
write_csv(tract_data_t2, "data/NaturalElementsSpatialAnalysis - TractData_all-t2_OverwroteNAs.csv")
alldata <- rbind(full_data_ovrNA_temp,fulld_ata_t2only)
full_data <- left_join(lat_longs_tract,ntl_tract_data) %>%
left_join(init_data %>% select (prolific_ID,time,movedyes))
full_data_ovrNA_temp <- NULL # where data with overwritten na's will be stored
#removing data point 1 b/c it has no associated location
full_data2n3 <- full_data %>% filter((time == 3) | (time == 2))
#for looping thru data  known to have some data at 2 and 3
t3data <- full_data %>% filter(time == 3)
for (i in 1:dim(t3data)[1]) {
temp <- full_data2n3 %>% filter(prolific_ID == t3data$prolific_ID[i])
if (t3data$movedyes[i] == 0) {
if (is.na(temp[1,7]) & !is.na(temp[2,7])) {
temp[1,3:20] <- temp[2,3:20] #overwritting location info, adding park and pop info
}
}
full_data_ovrNA_temp <- rbind(full_data_ovrNA_temp, temp)
}
# adding particpants who only took part 1
list <- c(t3data$prolific_ID)
full_data_t2only <- filter(full_data, !(prolific_ID %in% list))
alldata <- rbind(full_data_ovrNA_temp,full_data_t2only)
# check counting # of observations
check21 <- filter(init_data, time==2) # data set @t=2 provided to append my info to
check2 <- filter(full_data, time==2)  # data set @t=2 from lat longs
check3 <- filter(full_data, time==3) # data set @t=3 from lat longs
check22 <- filter(alldata, time==2) # data set @t=2 from above code
check32 <- filter(alldata, time==3) # data set @t=3 from above code
tract_data_t2 <- filter(alldata, time==2)
write_csv(tract_data_t2, "data/NaturalElementsSpatialAnalysis - TractData_all-t2_OverwroteNAs.csv")
View(lat_longs_full)
tract_data_t2 <- leftjoin(lat_longs_full %>%
mutate(
prolific_ID = `Prolific ID`,
time = Time),
alldata
) %>%
filter(time == 2)
tract_data_t2 <- left_join(lat_longs_full %>%
mutate(
prolific_ID = `Prolific ID`,
time = Time),
alldata
) %>%
filter(time == 2)
View(tract_data_t2)
tract_data_t2 <- filter(alldata, time==2)
alldata <- rbind(full_data_ovrNA_temp,full_data_t2only) %>% select(!movedyes)
View(alldata)
# check counting # of observations
check21 <- filter(init_data, time==2) # data set @t=2 provided to append my info to
check2 <- filter(full_data, time==2)  # data set @t=2 from lat longs
check3 <- filter(full_data, time==3) # data set @t=3 from lat longs
check22 <- filter(alldata, time==2) # data set @t=2 from above code
check32 <- filter(alldata, time==3) # data set @t=3 from above code
tract_data_t2 <- filter(alldata, time==2)
write_csv(tract_data_t2, "data/NaturalElementsSpatialAnalysis - TractData_all-t2_OverwroteNAs.csv")
View(check22)
full_data <- left_join(lat_longs_tract,ntl_tract_data) %>%
left_join(init_data %>% select (prolific_ID,time,movedyes))
full_data_ovrNA_temp <- NULL # where data with overwritten na's will be stored
#removing data point 1 b/c it has no associated location
full_data2n3 <- full_data %>% filter((time == 3) | (time == 2))
#for looping thru data  known to have some data at 2 and 3
t3data <- full_data %>% filter(time == 3)
for (i in 1:dim(t3data)[1]) {
temp <- full_data2n3 %>% filter(prolific_ID == t3data$prolific_ID[i])
if (t3data$movedyes[i] == 0) {
if (is.na(temp[1,7]) & !is.na(temp[2,7])) {
temp[1,3:20] <- temp[2,3:20] #overwritting location info, adding park and pop info
}
}
full_data_ovrNA_temp <- rbind(full_data_ovrNA_temp, temp)
}
# adding particpants who only took part 1
list <- c(t3data$prolific_ID)
full_data_t2only <- filter(full_data, !(prolific_ID %in% list))
alldata <- rbind(full_data_ovrNA_temp,full_data_t2only) %>% select(!movedyes)
# check counting # of observations
check21 <- filter(init_data, time==2) # data set @t=2 provided to append my info to
check2 <- filter(full_data, time==2)  # data set @t=2 from lat longs
check3 <- filter(full_data, time==3) # data set @t=3 from lat longs
check22 <- filter(alldata, time==2) # data set @t=2 from above code
check32 <- filter(alldata, time==3) # data set @t=3 from above code
tract_data_t2 <- filter(alldata, time==2)
write_csv(tract_data_t2, "data/NaturalElementsSpatialAnalysis - TractData_all-t2_OverwroteNAs.csv")
